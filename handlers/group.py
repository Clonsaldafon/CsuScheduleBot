from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from db import redis_client
from keyboards.reply import no_subscribed_kb, choose_faculty_kb, subscribed_kb
from service.edu import EduService
from service.group import GroupService
from states.group import Group
from keyboards.inline import auth_kb, all_groups_kb, faculties_kb, programs_kb


group_router = Router()
group_service = GroupService()
edu_service = EduService()
all_groups = dict()

@group_router.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
async def choose_faculty_handler(msg: Message, state: FSMContext):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await edu_service.get_faculties(token)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            faculties = dict()

            for faculty in response:
                faculties[faculty["name"]] = faculty["faculty_id"]

            await msg.answer(
                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
                reply_markup=faculties_kb(faculties)
            )

            await state.set_state(Group.faculty_id)
    except Exception as e:
        print(e)

@group_router.callback_query(F.data, Group.faculty_id)
async def capture_faculty(call: CallbackQuery, state: FSMContext):
    faculty_id = call.data
    await state.update_data(faculty_id=faculty_id)

    try:
        token = await redis_client.get(f"tg_id:{call.from_user.id}")
        response = await edu_service.get_programs(token, faculty_id)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await call.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            programs = []

            for program in response:
                programs.append(program["name"])

            await call.message.edit_text(
                text="–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è",
                reply_markup=programs_kb(programs)
            )

            await state.set_state(Group.program)
    except Exception as e:
        print(e)


@group_router.callback_query(F.data != "back", Group.program)
async def capture_program(call: CallbackQuery, state: FSMContext):
    program = call.data
    await state.update_data(program=program)

    try:
        token = await redis_client.get(f"tg_id:{call.from_user.id}")
        response = await group_service.get_groups(token, program)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await call.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            groups = dict()

            for group in response:
                groups[group["short_name"]] = group["group_id"]

            await call.message.edit_text(
                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
                reply_markup=all_groups_kb(groups)
            )

            await state.set_state(Group.group_id)
    except Exception as e:
        print(e)

@group_router.callback_query(F.data == "back", Group.program)
async def back_program_handler(call: CallbackQuery, state: FSMContext):
    try:
        token = await redis_client.get(f"tg_id:{call.from_user.id}")
        response = await edu_service.get_faculties(token)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await call.message.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            faculties = dict()

            for faculty in response:
                faculties[faculty["name"]] = faculty["faculty_id"]

            await call.message.edit_text(
                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
                reply_markup=faculties_kb(faculties)
            )

            await state.set_state(Group.faculty_id)
    except Exception as e:
        print(e)

@group_router.callback_query(F.data != "back", Group.group_id)
async def capture_group(call: CallbackQuery, state: FSMContext):
    group_id = call.data
    await state.update_data(group_id=group_id)

    await redis_client.set(
        name=f"group_id:{call.from_user.id}",
        value=str(group_id)
    )

    await call.message.answer(
        text="–¢–µ–ø–µ—Ä—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        reply_markup=no_subscribed_kb()
    )
    await state.clear()

@group_router.callback_query(F.data == "back", Group.group_id)
async def back_group_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(Group.program)
    faculty_id = await state.get_value("faculty_id")

    try:
        token = await redis_client.get(f"tg_id:{call.from_user.id}")
        response = await edu_service.get_programs(token, faculty_id)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await call.message.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            programs = []

            for program in response:
                programs.append(program["name"])

            await call.message.edit_text(
                text="–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è",
                reply_markup=programs_kb(programs)
            )

            await state.set_state(Group.program)
    except Exception as e:
        print(e)

@group_router.message(F.text, Group.code)
async def capture_code(msg: Message, state: FSMContext):
    code = msg.text

    await state.update_data(code=code)
    await msg.delete()

    try:
        group_id = await redis_client.get(f"group_id:{msg.from_user.id}")
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        response = await group_service.join(
            token=token,
            group_id=group_id,
            code=code
        )

        if "error" in response:
            match response["error"]:
                case "wrong group code" | "access denied":
                    await msg.answer(
                        text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ç–æ –∏–∑ –≤–∞—Å –æ—à–∏–±—Å—è? ü§î\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑",
                        reply_markup=all_groups_kb(all_groups)
                    )
                    await state.set_state(Group.code)
                case "token is expired":
                    await msg.delete_reply_markup()
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
                case _:
                    await msg.answer(
                        text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ ‚úç"
                    )
                    await state.set_state(Group.code)
        else:
            await msg.answer(text=f"Welcome! ü•≥", reply_markup=subscribed_kb())
            await state.clear()
    except Exception as e:
        print(e)

@group_router.message(F.text == "–ú–æ—è –≥—Ä—É–ø–ø–∞ ü´Ç")
async def my_group_handler(msg: Message):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await group_service.get_my(token)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
        elif "group_id" in response:
            answer = group_service.get_info(response)

            await msg.answer(
                text=answer,
                reply_markup=no_subscribed_kb()
            )
        else:
            answer = "–í–æ—Ç –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å:\n\n"
            for group in response:
                answer += group_service.get_info(group)

            await msg.answer(
                text=answer,
                reply_markup=no_subscribed_kb()
            )
    except Exception as e:
        print(e)

@group_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã üîô")
async def back_group_handler(msg: Message, state: FSMContext):
    await msg.answer(
        text="–¢—ã –º–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –≥—Ä—É–ø–ø—É",
        reply_markup=choose_faculty_kb()
    )
    await state.set_state(Group.faculty_id)

@group_router.message(F.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üîï")
async def leave_group_handler(msg: Message):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await group_service.leave(token)

        await msg.answer(
            text="–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ü´†",
            reply_markup=no_subscribed_kb()
        )
    except Exception as e:
        print(e)
