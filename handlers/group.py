from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from db import redis_client
from keyboards.reply import schedule_kb, groups_kb
from service.group import GroupService
from states.group import Group
from keyboards.inline import auth_kb, all_groups_kb


group_router = Router()
group_service = GroupService()
all_groups = dict()

@group_router.message(F.text == "–ì—Ä—É–ø–ø—ã")
async def all_groups_handler(msg: Message, state: FSMContext):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await group_service.get_all_groups(token)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
        else:
            global all_groups
            groups = dict()
            group_ids = []

            for group in response:
                groups[group["short_name"]] = group["group_id"]
                group_ids.append(str(group["group_id"]))
            all_groups = groups

            await state.set_state(Group.id)
            await msg.answer(
                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚§µ",
                reply_markup=all_groups_kb(groups)
            )
    except Exception as e:
        print(e)

@group_router.callback_query(F.data, Group.id)
async def group_handler(call: CallbackQuery, state: FSMContext):
    group_id = call.data

    await state.update_data(id=group_id)
    await state.set_state(Group.code)

    await call.message.answer(
        text="–£–ø—Å, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω ü´£\n"
             "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥. –Ø —É–≤–µ—Ä–µ–Ω, —Ç–≤–æ–π —Å—Ç–∞—Ä–æ—Å—Ç–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç üòâ"
    )

@group_router.message(F.text, Group.code)
async def group_join_handler(msg: Message, state: FSMContext):
    code = msg.text

    await state.update_data(code=code)
    await msg.delete()

    try:
        data = await state.get_data()
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        response = await group_service.join(
            token=token,
            group_id=data.get("id"),
            code=code
        )

        if "error" in response:
            match response["error"]:
                case "wrong group code" | "access denied":
                    await msg.answer(
                        text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ç–æ –∏–∑ –≤–∞—Å –æ—à–∏–±—Å—è? ü§î\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑",
                        reply_markup=all_groups_kb(all_groups)
                    )
                    await state.set_state(Group.code)
                case "token is expired":
                    await msg.delete_reply_markup()
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
                    await state.clear()
                case _:
                    await msg.answer(
                        text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ ‚úç",
                        reply_markup=all_groups_kb(all_groups)
                    )
                    await state.set_state(Group.code)
        else:
            await redis_client.set(name=f"group_id:{msg.from_user.id}", value=f"{data.get("id")}")
            await msg.answer(text=f"Welcome! ü•≥", reply_markup=schedule_kb())
            await state.clear()
    except Exception as e:
        print(e)

@group_router.message(F.text == "–ú–æ—è –≥—Ä—É–ø–ø–∞ ü´Ç")
async def my_group_handler(msg: Message):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await group_service.get_my(token)

        if "error" in response:
            match response["error"]:
                case "token is expired":
                    await msg.answer(
                        text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                             "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                        reply_markup=auth_kb()
                    )
        elif "group_id" in response:
            answer = group_service.get_info(response)

            await msg.answer(
                text=answer,
                reply_markup=schedule_kb()
            )
        else:
            answer = "–í–æ—Ç –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å:\n\n"
            for group in response:
                answer += group_service.get_info(group)

            await msg.answer(
                text=answer,
                reply_markup=schedule_kb()
            )
    except Exception as e:
        print(e)

@group_router.message(F.text == "–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É ‚ùå")
async def leave_group_handler(msg: Message):
    try:
        token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        response = await group_service.leave(token)

        await msg.answer(
            text="–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∑–∞–±—ã–ª –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏? ü´†",
            reply_markup=groups_kb()
        )
    except Exception as e:
        print(e)
