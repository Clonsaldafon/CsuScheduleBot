from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from db import redis_client
from keyboards.inline import auth_kb
from keyboards.reply import to_start_kb, no_subscribed_kb, choose_faculty_kb
from services.user import UserService
from states.user import LogIn, SignUp


user_router = Router()
user_service = UserService()

@user_router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(
        text="–ü—Ä–∏–≤–µ—Ç üëã\n" +
             "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ª–∏–±–æ –≤–æ–π–¥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )

@user_router.callback_query(F.data.in_({"login", "signup"}))
async def auth_handler(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

    data = call.data
    match data:
        case "login":
            await call.message.answer(
                text="–•–º... –Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é ü§î\n" +
                     "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )
            await state.set_state(LogIn.email)
        case "signup":
            await call.message.answer(
                text="–Ø —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å —Ç–µ–±—è ü§ó\n" +
                     "–ó–∞–ø–æ–ª–Ω–∏—à—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞\n" +
                     "–ù–æ –∑–∞—Ç–æ —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω—é, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )
            await state.set_state(SignUp.email)

@user_router.message(F.text == "–í –Ω–∞—á–∞–ª–æ üîô")
async def to_start_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        text="–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ª–∏–±–æ –≤–æ–π–¥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )

@user_router.message(F.text, LogIn.email)
async def capture_email_auth(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(
        text="–ö–∞–∫-–±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ... ü§î\n" +
             "–ê –∫–∞–∫–æ–π –ø–∞—Ä–æ–ª—å? üîí",
        reply_markup=to_start_kb()
    )
    await state.set_state(LogIn.password)

@user_router.message(F.text, LogIn.password)
async def capture_password_auth(msg: Message, state: FSMContext):
    await state.update_data(password=msg.text)
    await msg.delete()
    data = await state.get_data()

    try:
        response = await user_service.log_in(
           email=data.get("email"),
           password=data.get("password")
        )

        if "access_token" in response:
            await redis_client.set(
                name=f"tg_id:{msg.from_user.id}",
                value=str(response["access_token"])
            )
            await state.clear()

            is_group_id_exists = await redis_client.exists(f"group_id:{msg.from_user.id}")
            if is_group_id_exists:
                await msg.answer(
                    text="–¢–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–Ω–∏–ª ü§™\n" +
                         "–ö–∞–∫ –∂–µ —è –º–æ–≥ —Ç–µ–±—è –∑–∞–±—ã—Ç—å ü§¶‚Äç‚ôÇÔ∏è",
                    reply_markup=no_subscribed_kb()
                )
            else:
                await msg.answer(
                    text="–¢–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–Ω–∏–ª ü§™\n" +
                         "–ö–∞–∫ –∂–µ —è –º–æ–≥ —Ç–µ–±—è –∑–∞–±—ã—Ç—å ü§¶‚Äç‚ôÇÔ∏è",
                    reply_markup=choose_faculty_kb()
                )
        else:
            match response["error"]:
                case "user not found":
                    await msg.answer(
                        text="–ù–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ç–∞–∫–∏–º email üòî\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(LogIn.email)
                case "Key: 'LogInRequest.Email' Error:Field validation for 'Email' failed on the 'email' tag":
                    await msg.answer(
                        text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email üßê\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(LogIn.email)
                case "wrong password":
                    await msg.answer(
                        text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üîí\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(LogIn.password)
                case _:
                    await msg.answer(
                        text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ email –µ—â–µ —Ä–∞–∑ ‚úç",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(LogIn.email)
    except Exception as e:
        print(e)

@user_router.message(F.text, SignUp.email)
async def capture_email(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(
        text="–ü—Ä–∏–¥—É–º–∞–π —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤) üîí",
        reply_markup=to_start_kb()
    )
    await state.set_state(SignUp.password)

@user_router.message(F.text, SignUp.password)
async def capture_password(msg: Message, state: FSMContext):
    if 8 <= len(msg.text) <= 40:
        await state.update_data(password=msg.text)
        await msg.delete()
        await msg.answer(
            text="–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞—Ö–æ—á–µ—Ç –≤–∑–ª–æ–º–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ –±—É–¥–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ü§ì\n"
                 "–ò –Ω–∞–∫–æ–Ω–µ—Ü, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –§–ò–û ‚úç",
            reply_markup=to_start_kb()
        )
        await state.set_state(SignUp.fullName)
    else:
        await msg.delete()
        await msg.answer(
            text="–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ª–µ–≥–∫–æ –≤–∑–ª–æ–º–∞–µ—Ç –¥–∞–∂–µ –ø—è—Ç–∏–∫–ª–∞—Å—Å–Ω–∏–∫ ü§™\n" +
                 "–ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–æ–∂–Ω–µ–µ",
            reply_markup=to_start_kb()
        )
        await state.set_state(SignUp.password)

@user_router.message(F.text, SignUp.fullName)
async def capture_fullname(msg: Message, state: FSMContext):
    await state.update_data(fullName=msg.text)
    data = await state.get_data()

    try:
        response = await user_service.sign_up(
            email=data.get("email"),
            password=data.get("password"),
            full_name=data.get("fullName"),
            telegram=str(msg.from_user.id)
        )

        if "access_token" in response:
            await redis_client.set(
                name=f"tg_id:{msg.from_user.id}",
                value=str(response["access_token"])
            )
            await msg.answer(
                text="–¢–µ–ø–µ—Ä—å-—Ç–æ –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã! üòä",
                reply_markup=choose_faculty_kb()
            )
            await state.clear()
        else:
            match response["error"]:
                case "user already exists":
                    await msg.answer(
                        text="–Ø —É–∂–µ –∑–Ω–∞–∫–æ–º —Å —á–µ–ª–æ–≤–µ–∫–æ–º, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–∞–∫–æ–π –∂–µ email ü§®\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(SignUp.email)
                case "Key: 'SignUpRequest.Email' Error:Field validation for 'Email' failed on the 'email' tag":
                    await msg.answer(
                        text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email üßê\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(SignUp.email)
                case "Key: 'SignUpRequest.Password' Error:Field validation for 'Password' failed on the 'min' tag":
                    await msg.answer(
                        text="–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π üôÉ\n" +
                             "–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(SignUp.password)
                case _:
                    await msg.answer(
                        text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ email –µ—â–µ —Ä–∞–∑ ‚úç",
                        reply_markup=to_start_kb()
                    )
                    await state.set_state(SignUp.email)
    except Exception as e:
        print(e)
