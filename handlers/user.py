from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from db import redis_client
from keyboards.inline import auth_kb, roles_kb
from keyboards.reply import to_start_kb, no_subscribed_kb, choose_faculty_kb
from services.user import UserService
from states.admin import AdminSignUp, AdminLogIn
from states.student import StudentSignUp, StudentLogIn

user_router = Router()
user_service = UserService()

@user_router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(
        text="–ü—Ä–∏–≤–µ—Ç üëã\n" +
             "–ß—Ç–æ–±—ã –º—ã —Å —Ç–æ–±–æ–π –º–æ–≥–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å ‚§µ",
        reply_markup=roles_kb()
    )

@user_router.callback_query(F.data == "student")
async def student_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer(text="–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –§–ò–û ‚úçÔ∏è", reply_markup=None)
    await state.set_state(StudentSignUp.fullname)

@user_router.message(F.text, StudentSignUp.fullname)
async def capture_student_fullname_signup(msg: Message, state: FSMContext):
    fullname = msg.text
    telegram = msg.chat.id
    await state.update_data(fullname=fullname)

    try:
        response = await user_service.sign_up_student(fullname=fullname, telegram=telegram)

        if "access_token" in response:
            await redis_client.set(name=f"chat_id:{msg.chat.id}", value=str(response["access_token"]))
            await msg.answer(text="–¢–µ–ø–µ—Ä—å-—Ç–æ –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã! üòä",reply_markup=choose_faculty_kb())
            await state.clear()
        else:
            # TODO: make error handling
            pass
    except Exception as e:
        print(e)

@user_router.message(F.text, StudentLogIn.fullname)
async def capture_student_fullname_signup(msg: Message, state: FSMContext):
    # TODO: make student registration
    pass

@user_router.callback_query(F.data == "admin")
async def admin_handler(call: CallbackQuery):
    await call.message.edit_text(
        text="–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )

@user_router.callback_query(F.data.in_({"login", "signup"}))
async def admin_auth_handler(call: CallbackQuery, state: FSMContext):
    data = call.data
    match data:
        case "login":
            await call.message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )
            await state.set_state(AdminLogIn.email)
        case "signup":
            await call.message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )
            await state.set_state(AdminSignUp.email)

@user_router.message(F.text == "–í –Ω–∞—á–∞–ª–æ üîô")
async def to_start_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        text="–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )

@user_router.message(F.text, AdminSignUp.email)
async def capture_admin_email_signup(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(
        text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤) üîí",
        reply_markup=to_start_kb()
    )
    await state.set_state(AdminSignUp.password)

@user_router.message(F.text, AdminSignUp.password)
async def capture_admin_password_signup(msg: Message, state: FSMContext):
    if 8 <= len(msg.text) <= 40:
        await state.update_data(password=msg.text)
        await msg.delete()
        data = await state.get_data()

        try:
            response = await user_service.sign_up_admin(
                email=data.get("email"),
                password=data.get("password")
            )

            if "access_token" in response:
                await redis_client.set(name=f"chat_id:{msg.chat.id}", value=str(response["access_token"]))
                await msg.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=None)
                await state.clear()
            else:
                # TODO: make error handling
                pass
        except Exception as e:
            print(e)
    else:
        await msg.delete()
        await msg.answer(
            text="–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π",
            reply_markup=to_start_kb()
        )
        await state.set_state(AdminSignUp.password)

@user_router.message(F.text, AdminLogIn.email)
async def capture_admin_email_login(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí", reply_markup=to_start_kb())
    await state.set_state(AdminLogIn.password)

@user_router.message(F.text, AdminLogIn.password)
async def capture_admin_password_login(msg: Message, state: FSMContext):
    await state.update_data(password=msg.text)
    await msg.delete()
    data = await state.get_data()

    try:
        response = await user_service.log_in_admin(
           email=data.get("email"),
           password=data.get("password")
        )

        if "access_token" in response:
            await redis_client.set(name=f"chat_id:{msg.chat.id}", value=str(response["access_token"]))
            await msg.answer(text="–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!", reply_markup=None)
            await state.clear()
        else:
            # TODO: make error handling
            pass
    except Exception as e:
        print(e)
