import emoji

from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiohttp import ClientSession

from kb import groups_kb, all_groups_kb, schedule_kb, auth_kb, to_start_kb
from db import redis_client
from network import post, get

router = Router()

groups = dict()
group_ids = []

my_groups = dict()
my_group_ids = []

class RegistrationStates(StatesGroup):
    email = State()
    password = State()
    fullName = State()


class AuthorizationStates(StatesGroup):
    email = State()
    password = State()


class GroupStates(StatesGroup):
    id = State()
    code = State()
    my_group_id = State()


@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(
        text="–ü—Ä–∏–≤–µ—Ç üëã\n" +
             "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ª–∏–±–æ –≤–æ–π–¥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )


@router.callback_query(F.data.in_({"login", "signup"}))
async def auth_handler(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

    data = call.data

    match data:
        case "login":
            await call.message.answer(
                text="–•–º... –Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é ü§î\n" +
                     "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )

            await state.set_state(AuthorizationStates.email)
        case "signup":
            await call.message.answer(
                text="–Ø —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å —Ç–µ–±—è ü§ó\n" +
                     "–ó–∞–ø–æ–ª–Ω–∏—à—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞\n" +
                     "–ù–æ –∑–∞—Ç–æ —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω—é, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email üìß",
                reply_markup=to_start_kb()
            )

            await state.set_state(RegistrationStates.email)


@router.message(F.text == "–í –Ω–∞—á–∞–ª–æ üîô")
async def to_start_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        text="–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ª–∏–±–æ –≤–æ–π–¥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚§µ",
        reply_markup=auth_kb()
    )


@router.message(F.text, AuthorizationStates.email)
async def capture_email_auth(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(
        text="–ö–∞–∫-–±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ... ü§î\n" +
             "–ê –∫–∞–∫–æ–π –ø–∞—Ä–æ–ª—å? üîí",
        reply_markup=to_start_kb()
    )
    await state.set_state(AuthorizationStates.password)


@router.message(F.text, AuthorizationStates.password)
async def capture_password_auth(msg: Message, state: FSMContext):
    await state.update_data(password=msg.text)
    await msg.delete()
    data = await state.get_data()

    try:
        headers = {
            "Content-Type": "application/json"
        }

        body = {
            "email": data.get("email"),
            "password": data.get("password")
        }

        async with ClientSession() as session:
            response = await post(
                session=session,
                url="/api/v1/auth/login",
                headers=headers,
                data=body
            )
            print(response)

            if "access_token" in response:
                await redis_client.set(
                    name=f"tg_id:{msg.from_user.id}",
                    value=str(response["access_token"])
                )
                await state.clear()

                is_group_id_exists = await redis_client.exists(f"group_id:{msg.from_user.id}")
                if is_group_id_exists:
                    await msg.answer(
                        text="–¢–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–Ω–∏–ª ü§™\n" +
                             "–ö–∞–∫ –∂–µ —è –º–æ–≥ —Ç–µ–±—è –∑–∞–±—ã—Ç—å ü§¶‚Äç‚ôÇÔ∏è",
                        reply_markup=schedule_kb()
                    )
                else:
                    await msg.answer(
                        text="–¢–µ–ø–µ—Ä—å –≤—Å–ø–æ–º–Ω–∏–ª ü§™\n" +
                             "–ö–∞–∫ –∂–µ —è –º–æ–≥ —Ç–µ–±—è –∑–∞–±—ã—Ç—å ü§¶‚Äç‚ôÇÔ∏è",
                        reply_markup=groups_kb()
                    )
            else:
                match response["error"]:
                    case "user not found":
                        await msg.answer(
                            text="–ù–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ç–∞–∫–∏–º email üòî\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(AuthorizationStates.email)
                    case "Key: 'LogInRequest.Email' Error:Field validation for 'Email' failed on the 'email' tag":
                        await msg.answer(
                            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email üßê\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(AuthorizationStates.email)
                    case "wrong password":
                        await msg.answer(
                            text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üîí\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(AuthorizationStates.password)
                    case _:
                        await msg.answer(
                            text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ email –µ—â–µ —Ä–∞–∑ ‚úç",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(AuthorizationStates.email)

    except Exception as e:
        print(e)


@router.message(F.text, RegistrationStates.email)
async def capture_email(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await msg.answer(
        text="–ü—Ä–∏–¥—É–º–∞–π —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤) üîí",
        reply_markup=to_start_kb()
    )
    await state.set_state(RegistrationStates.password)


@router.message(F.text, RegistrationStates.password)
async def capture_password(msg: Message, state: FSMContext):
    if 8 <= len(msg.text) <= 40:
        await state.update_data(password=msg.text)
        await msg.delete()
        await msg.answer(
            text="–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞—Ö–æ—á–µ—Ç –≤–∑–ª–æ–º–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ –±—É–¥–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ü§ì\n"
                 "–ò –Ω–∞–∫–æ–Ω–µ—Ü, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –§–ò–û ‚úç",
            reply_markup=to_start_kb()
        )
        await state.set_state(RegistrationStates.fullName)
    else:
        await msg.delete()
        await msg.answer(
            text="–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ª–µ–≥–∫–æ –≤–∑–ª–æ–º–∞–µ—Ç –¥–∞–∂–µ –ø—è—Ç–∏–∫–ª–∞—Å—Å–Ω–∏–∫ ü§™\n" +
                 "–ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–æ–∂–Ω–µ–µ",
            reply_markup=to_start_kb()
        )
        await state.set_state(RegistrationStates.password)


@router.message(F.text, RegistrationStates.fullName)
async def capture_fullname(msg: Message, state: FSMContext):
    await state.update_data(fullName=msg.text)
    data = await state.get_data()

    try:
        headers = {
            "Content-Type": "application/json"
        }

        body = {
            "email": data.get("email"),
            "password": data.get("password"),
            "role": "student",
            "fullName": data.get("fullName"),
            "telegram": str(msg.from_user.id)
        }

        async with ClientSession() as session:
            response = await post(
                session=session,
                url="/api/v1/auth/signup",
                headers=headers,
                data=body
            )
            print(response)

            if "access_token" in response:
                await redis_client.set(
                    name=f"tg_id:{msg.from_user.id}",
                    value=str(response["access_token"])
                )
                await state.clear()
                await msg.answer(
                    text="–¢–µ–ø–µ—Ä—å-—Ç–æ –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã! üòä",
                    reply_markup=groups_kb()
                )
                await state.clear()
            else:
                match response["error"]:
                    case "user already exists":
                        await msg.answer(
                            text="–Ø —É–∂–µ –∑–Ω–∞–∫–æ–º —Å —á–µ–ª–æ–≤–µ–∫–æ–º, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–∞–∫–æ–π –∂–µ email ü§®\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(RegistrationStates.email)
                    case "Key: 'SignUpRequest.Email' Error:Field validation for 'Email' failed on the 'email' tag":
                        await msg.answer(
                            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email üßê\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(RegistrationStates.email)
                    case "Key: 'SignUpRequest.Password' Error:Field validation for 'Password' failed on the 'min' tag":
                        await msg.answer(
                            text="–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π üôÉ\n" +
                                 "–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(RegistrationStates.password)
                    case _:
                        await msg.answer(
                            text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ email –µ—â–µ —Ä–∞–∑ ‚úç",
                            reply_markup=to_start_kb()
                        )
                        await state.set_state(RegistrationStates.email)

    except Exception as e:
        print(e)


@router.message(F.text == "–ì—Ä—É–ø–ø—ã")
async def all_groups_handler(msg: Message, state: FSMContext):
    try:
        access_token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            response = await get(
                session=session,
                url="/api/v1/groups",
                headers=headers
            )
            print(response)

            if "error" in response:
                match response["error"]:
                    case "token is expired":
                        await msg.delete_reply_markup()
                        await msg.answer(
                            text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                 "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                            reply_markup=auth_kb()
                        )
                        await state.clear()
            else:
                groups = dict()
                group_ids = []

                for group in response:
                    groups[group["short_name"]] = group["group_id"]
                    group_ids.append(str(group["group_id"]))

                await state.set_state(GroupStates.id)
                await msg.answer(
                    text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚§µ",
                    reply_markup=all_groups_kb(groups)
                )

    except Exception as e:
        print(e)


@router.callback_query(F.data, GroupStates.id)
async def group_handler(call: CallbackQuery, state: FSMContext):
    group_id = call.data

    await state.update_data(id=group_id)
    await state.set_state(GroupStates.code)

    await call.message.answer(
        text="–£–ø—Å, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω ü´£\n"
             "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥. –Ø —É–≤–µ—Ä–µ–Ω, —Ç–≤–æ–π —Å—Ç–∞—Ä–æ—Å—Ç–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç üòâ"
    )


@router.message(F.text, GroupStates.code)
async def group_join_handler(msg: Message, state: FSMContext):
    code = msg.text
    await state.update_data(code=code)
    await msg.delete()
    
    try:
        data = await state.get_data()
        access_token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            body = {
                "code": code
            }

            response = await post(
                session=session,
                url=f"/api/v1/groups/{data.get("id")}/join",
                headers=headers,
                data=body
            )
            print(response)

            if "error" in response:
                match response["error"]:
                    case "wrong group code" | "access denied":
                        await msg.answer(
                            text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ç–æ –∏–∑ –≤–∞—Å –æ—à–∏–±—Å—è? ü§î\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑",
                            reply_markup=all_groups_kb(groups)
                        )
                        await state.set_state(GroupStates.code)
                    case "token is expired":
                        await msg.delete_reply_markup()
                        await msg.answer(
                            text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                 "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                            reply_markup=auth_kb()
                        )
                        await state.clear()
                    case _:
                        await msg.answer(
                            text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... ü´£\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ ‚úç",
                            reply_markup=all_groups_kb(groups)
                        )
                        await state.set_state(GroupStates.code)
            else:
                await redis_client.set(
                    name=f"group_id:{msg.from_user.id}",
                    value=f"{data.get("id")}"
                )
                await msg.answer(
                    text=f"Welcome! ü•≥",
                    reply_markup=schedule_kb()
                )
                await state.clear()

    except Exception as e:
        print(e)


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üóì")
async def today_schedule_handler(msg: Message, state: FSMContext):
    try:
        access_token = await redis_client.get(f"tg_id:{msg.from_user.id}")
        group_id = await redis_client.get(f"group_id:{msg.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            response = await get(
                session=session,
                url=f"/api/v1/groups/my",
                headers=headers
            )
            print(response)

            if "error" in response:
                match response["error"]:
                    case "token is expired":
                        await msg.delete_reply_markup()
                        await msg.answer(
                            text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                 "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                            reply_markup=auth_kb()
                        )
            elif "group_id" in response:
                response = await get(
                    session=session,
                    url=f"/api/v1/groups/{group_id}/schedule",
                    headers=headers
                )
                print(response)

                if response is None:
                    await msg.answer(
                        text="–°—Ç–∞—Ä–æ—Å—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üò™\n" +
                             "–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å –µ–≥–æ",
                        reply_markup=schedule_kb()
                    )
                elif "error" in response:
                    match response["error"]:
                        case "token is expired":
                            await msg.delete_reply_markup()
                            await msg.answer(
                                text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                     "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                                reply_markup=auth_kb()
                            )
                else:
                    is_even = (datetime.today().isocalendar().week + 1) % 2 == 0
                    day_of_week = datetime.today().weekday() + 1
                    answer = ""

                    for subject in response:
                        if subject["is_even"] == is_even:
                            if subject["day_of_week"] == day_of_week:
                                start_time = ":".join(str(subject["start_time"]).split(":")[:-1])
                                end_time = ":".join(str(subject["end_time"]).split(":")[:-1])
                                room = f"–∞—É–¥. {subject["room"]}"

                                answer += f"üí• {subject["subject_name"]}\n"
                                answer += f"üìñ {subject["type"]}\n"
                                answer += f"üë®‚Äçüè´ {subject["teacher"]}\n"
                                answer += f"üî¢ {room}, {subject["building"]["name"]} ({subject["building"]["address"]})\n"
                                answer += f"‚è∞ {start_time} - {end_time}\n"
                                answer += "\n"

                    await msg.answer(
                        text=answer,
                        reply_markup=schedule_kb()
                    )
            else:
                my_groups = dict()
                my_group_ids = []
                for group in response:
                    my_groups[group["short_name"]] = group["group_id"]
                    my_group_ids.append(str(group["group_id"]))

                await state.set_state(GroupStates.my_group_id)
                await msg.answer(
                    text="–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö üßê\n"
                         "–ö–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
                    reply_markup=all_groups_kb(my_groups)
                )

    except Exception as e:
        print(e)


@router.callback_query(F.data, GroupStates.my_group_id)
async def group_schedule_handler(call: CallbackQuery, state: FSMContext):
    group_id = call.data

    try:
        access_token = await redis_client.get(f"tg_id:{call.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            response = await get(
                session=session,
                url=f"/api/v1/groups/{group_id}/schedule",
                headers=headers
            )
            print(response)

            if response == "None":
                await call.message.answer(
                    text="–°—Ç–∞—Ä–æ—Å—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üò™\n" +
                         "–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å –µ–≥–æ",
                    reply_markup=schedule_kb()
                )
            elif "error" in response:
                match response["error"]:
                    case "token is expired":
                        await call.message.delete_reply_markup()
                        await call.message.answer(
                            text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                 "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                            reply_markup=auth_kb()
                        )
            else:
                is_even = (datetime.today().isocalendar().week + 1) % 2 == 0
                day_of_week = datetime.today().weekday() + 1
                answer = ""

                for subject in response:
                    if subject["is_even"] == is_even:
                        if subject["day_of_week"] == day_of_week:
                            start_time = ":".join(str(subject["start_time"]).split(":")[:-1])
                            end_time = ":".join(str(subject["end_time"]).split(":")[:-1])
                            room = f"–∞—É–¥. {subject["room"]}"

                            answer += f"üí• {subject["subject_name"]}\n"
                            answer += f"üìñ {subject["type"]}\n"
                            answer += f"üë®‚Äçüè´ {subject["teacher"]}\n"
                            answer += f"üî¢ {room}, {subject["building"]["name"]} ({subject["building"]["address"]})\n"
                            answer += f"‚è∞{start_time} - {end_time}\n"
                            answer += "\n"

                await call.message.answer(
                    text=answer,
                    reply_markup=schedule_kb()
                )
            await state.clear()

    except Exception as e:
        print(e)


@router.message(F.text == "–ú–æ—è –≥—Ä—É–ø–ø–∞ ü´Ç")
async def my_group_handler(msg: Message):
    try:
        access_token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            response = await get(
                session=session,
                url=f"/api/v1/groups/my",
                headers=headers
            )
            print(response)

            if "error" in response:
                match response["error"]:
                    case "token is expired":
                        await msg.delete_reply_markup()
                        await msg.answer(
                            text="–û–π, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –º–æ–µ–π –ø–∞–º—è—Ç—å—é üòµ‚Äçüí´\n"
                                 "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ ‚§µ",
                            reply_markup=auth_kb()
                        )
            elif "group_id" in response:
                is_schedule_exists = "–¥–∞" if response["exists_schedule"] else "–Ω–µ—Ç"

                answer = f"üèõ {response["faculty"]}\n"
                answer += f"üìö {response["program"]}\n"
                answer += f"‚ú® {response["short_name"]}\n"
                answer += f"ü´Ç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {response["number_of_people"]}\n"
                answer += f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {is_schedule_exists}\n"

                await msg.answer(
                    text=answer,
                    reply_markup=schedule_kb()
                )
            else:
                answer = "–í–æ—Ç –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å:\n\n"
                for group in response:
                    is_schedule_exists = "–¥–∞" if group["exists_schedule"] else "–Ω–µ—Ç"

                    answer += f"üèõ {group["faculty"]}\n"
                    answer += f"üìö {group["program"]}\n"
                    answer += f"‚ú® {group["short_name"]}\n"
                    answer += f"ü´Ç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group["number_of_people"]}\n"
                    answer += f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {is_schedule_exists}\n"
                    answer += "\n"

                await msg.answer(
                    text=answer,
                    reply_markup=schedule_kb()
                )

    except Exception as e:
        print(e)

@router.message(F.text == "–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É ‚ùå")
async def leave_group_handler(msg: Message):
    try:
        access_token = await redis_client.get(f"tg_id:{msg.from_user.id}")

        async with ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }

            response = await post(
                session=session,
                url=f"/api/v1/groups/leave",
                headers=headers
            )
            print(response)

            await msg.answer(
                text="–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∑–∞–±—ã–ª –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏? ü´†",
                reply_markup=groups_kb()
            )

    except Exception as e:
        print(e)
